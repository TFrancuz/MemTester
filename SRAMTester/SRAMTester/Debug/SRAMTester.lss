
SRAMTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000274  00804000  00804000  0000059e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006030  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000399f  00000000  00000000  00006778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b0  00000000  00000000  0000a117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  0000b2c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000031aa  00000000  00000000  0000b74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013f3  00000000  00000000  0000e8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000fce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__vector_53>
  d8:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_54>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ea e2       	ldi	r30, 0x2A	; 42
 108:	f5 e0       	ldi	r31, 0x05	; 5
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 30       	cpi	r26, 0x00	; 0
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	22 e4       	ldi	r18, 0x42	; 66
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a4 37       	cpi	r26, 0x74	; 116
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 ab 01 	call	0x356	; 0x356 <main>
 12e:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <InitRDWRTimer>:
}

void DRAM_CASRASRefresh()		//Sekwencja odœwie¿ania CAS before RAS
{
	
}
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
 13c:	90 e8       	ldi	r25, 0x80	; 128
 13e:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <__TEXT_REGION_LENGTH__+0x7e04b4>
 142:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7e04a6>
 146:	a7 ee       	ldi	r26, 0xE7	; 231
 148:	b5 e0       	ldi	r27, 0x05	; 5
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	8c 93       	st	X, r24
 14e:	e0 e0       	ldi	r30, 0x00	; 0
 150:	fb e0       	ldi	r31, 0x0B	; 11
 152:	96 e1       	ldi	r25, 0x16	; 22
 154:	91 83       	std	Z+1, r25	; 0x01
 156:	84 83       	std	Z+4, r24	; 0x04
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	24 87       	std	Z+12, r18	; 0x0c
 15e:	35 87       	std	Z+13, r19	; 0x0d
 160:	80 83       	st	Z, r24
 162:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__TEXT_REGION_LENGTH__+0x7e023e>
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	9c 93       	st	X, r25
 16a:	e0 e1       	ldi	r30, 0x10	; 16
 16c:	fb e0       	ldi	r31, 0x0B	; 11
 16e:	96 e0       	ldi	r25, 0x06	; 6
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	84 83       	std	Z+4, r24	; 0x04
 174:	24 87       	std	Z+12, r18	; 0x0c
 176:	35 87       	std	Z+13, r19	; 0x0d
 178:	80 83       	st	Z, r24
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>
 180:	08 95       	ret

00000182 <IO_DRAM_Init>:
 182:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f4 e0       	ldi	r31, 0x04	; 4
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	80 83       	st	Z, r24
 18e:	8c ef       	ldi	r24, 0xFC	; 252
 190:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7e0461>
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7e04a5>
 1a0:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	80 83       	st	Z, r24
 1a8:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
 1ac:	08 95       	ret

000001ae <DRAM_Timers_init>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	41 ea       	ldi	r20, 0xA1	; 161
 1b4:	54 e0       	ldi	r21, 0x04	; 4
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	fa 01       	movw	r30, r20
 1ba:	80 83       	st	Z, r24
 1bc:	30 e8       	ldi	r19, 0x80	; 128
 1be:	30 93 b4 04 	sts	0x04B4, r19	; 0x8004b4 <__TEXT_REGION_LENGTH__+0x7e04b4>
 1c2:	c6 ea       	ldi	r28, 0xA6	; 166
 1c4:	d4 e0       	ldi	r29, 0x04	; 4
 1c6:	88 83       	st	Y, r24
 1c8:	a7 ee       	ldi	r26, 0xE7	; 231
 1ca:	b5 e0       	ldi	r27, 0x05	; 5
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	8c 93       	st	X, r24
 1d0:	e0 e0       	ldi	r30, 0x00	; 0
 1d2:	fb e0       	ldi	r31, 0x0B	; 11
 1d4:	26 e1       	ldi	r18, 0x16	; 22
 1d6:	21 83       	std	Z+1, r18	; 0x01
 1d8:	84 83       	std	Z+4, r24	; 0x04
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	64 87       	std	Z+12, r22	; 0x0c
 1e0:	75 87       	std	Z+13, r23	; 0x0d
 1e2:	80 83       	st	Z, r24
 1e4:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__TEXT_REGION_LENGTH__+0x7e023e>
 1e8:	90 e2       	ldi	r25, 0x20	; 32
 1ea:	fa 01       	movw	r30, r20
 1ec:	90 83       	st	Z, r25
 1ee:	30 93 b5 04 	sts	0x04B5, r19	; 0x8004b5 <__TEXT_REGION_LENGTH__+0x7e04b5>
 1f2:	98 83       	st	Y, r25
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	9c 93       	st	X, r25
 1f8:	e0 e1       	ldi	r30, 0x10	; 16
 1fa:	fb e0       	ldi	r31, 0x0B	; 11
 1fc:	21 83       	std	Z+1, r18	; 0x01
 1fe:	84 83       	std	Z+4, r24	; 0x04
 200:	24 e0       	ldi	r18, 0x04	; 4
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	24 87       	std	Z+12, r18	; 0x0c
 206:	35 87       	std	Z+13, r19	; 0x0d
 208:	80 83       	st	Z, r24
 20a:	22 e0       	ldi	r18, 0x02	; 2
 20c:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>
 210:	e0 e0       	ldi	r30, 0x00	; 0
 212:	fa e0       	ldi	r31, 0x0A	; 10
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	3f ef       	ldi	r19, 0xFF	; 255
 21a:	26 a3       	std	Z+38, r18	; 0x26
 21c:	37 a3       	std	Z+39, r19	; 0x27
 21e:	29 e0       	ldi	r18, 0x09	; 9
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	20 a7       	std	Z+40, r18	; 0x28
 224:	31 a7       	std	Z+41, r19	; 0x29
 226:	28 e0       	ldi	r18, 0x08	; 8
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	22 a7       	std	Z+42, r18	; 0x2a
 22c:	33 a7       	std	Z+43, r19	; 0x2b
 22e:	2a e0       	ldi	r18, 0x0A	; 10
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	20 a3       	std	Z+32, r18	; 0x20
 234:	31 a3       	std	Z+33, r19	; 0x21
 236:	16 aa       	std	Z+54, r1	; 0x36
 238:	17 aa       	std	Z+55, r1	; 0x37
 23a:	85 83       	std	Z+5, r24	; 0x05
 23c:	e0 e0       	ldi	r30, 0x00	; 0
 23e:	f2 e0       	ldi	r31, 0x02	; 2
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	80 8b       	std	Z+16, r24	; 0x10
 244:	85 e8       	ldi	r24, 0x85	; 133
 246:	81 8b       	std	Z+17, r24	; 0x11
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <DRAM_SetAddress>:
 24e:	8f 92       	push	r8
 250:	9f 92       	push	r9
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	ef 92       	push	r14
 258:	ff 92       	push	r15
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	20 91 72 40 	lds	r18, 0x4072	; 0x804072 <CASNo>
 266:	4b 01       	movw	r8, r22
 268:	5c 01       	movw	r10, r24
 26a:	04 c0       	rjmp	.+8      	; 0x274 <DRAM_SetAddress+0x26>
 26c:	b6 94       	lsr	r11
 26e:	a7 94       	ror	r10
 270:	97 94       	ror	r9
 272:	87 94       	ror	r8
 274:	2a 95       	dec	r18
 276:	d2 f7       	brpl	.-12     	; 0x26c <DRAM_SetAddress+0x1e>
 278:	20 91 70 40 	lds	r18, 0x4070	; 0x804070 <CASMask>
 27c:	30 91 71 40 	lds	r19, 0x4071	; 0x804071 <CASMask+0x1>
 280:	62 23       	and	r22, r18
 282:	73 23       	and	r23, r19
 284:	e6 e8       	ldi	r30, 0x86	; 134
 286:	f4 e0       	ldi	r31, 0x04	; 4
 288:	53 e0       	ldi	r21, 0x03	; 3
 28a:	50 83       	st	Z, r21
 28c:	28 2d       	mov	r18, r8
 28e:	23 70       	andi	r18, 0x03	; 3
 290:	85 e8       	ldi	r24, 0x85	; 133
 292:	e8 2e       	mov	r14, r24
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	f8 2e       	mov	r15, r24
 298:	d7 01       	movw	r26, r14
 29a:	2c 93       	st	X, r18
 29c:	26 e0       	ldi	r18, 0x06	; 6
 29e:	34 e0       	ldi	r19, 0x04	; 4
 2a0:	4c ef       	ldi	r20, 0xFC	; 252
 2a2:	d9 01       	movw	r26, r18
 2a4:	4c 93       	st	X, r20
 2a6:	18 2d       	mov	r17, r8
 2a8:	1c 7f       	andi	r17, 0xFC	; 252
 2aa:	c5 e0       	ldi	r28, 0x05	; 5
 2ac:	d4 e0       	ldi	r29, 0x04	; 4
 2ae:	18 83       	st	Y, r17
 2b0:	04 e6       	ldi	r16, 0x64	; 100
 2b2:	14 e0       	ldi	r17, 0x04	; 4
 2b4:	d8 01       	movw	r26, r16
 2b6:	1c 92       	st	X, r1
 2b8:	89 2d       	mov	r24, r9
 2ba:	99 27       	eor	r25, r25
 2bc:	a5 e6       	ldi	r26, 0x65	; 101
 2be:	b4 e0       	ldi	r27, 0x04	; 4
 2c0:	8c 93       	st	X, r24
 2c2:	88 e0       	ldi	r24, 0x08	; 8
 2c4:	80 83       	st	Z, r24
 2c6:	00 00       	nop
 2c8:	00 00       	nop
 2ca:	00 00       	nop
 2cc:	50 83       	st	Z, r21
 2ce:	86 2f       	mov	r24, r22
 2d0:	83 70       	andi	r24, 0x03	; 3
 2d2:	f7 01       	movw	r30, r14
 2d4:	80 83       	st	Z, r24
 2d6:	f8 01       	movw	r30, r16
 2d8:	10 82       	st	Z, r1
 2da:	7c 93       	st	X, r23
 2dc:	d9 01       	movw	r26, r18
 2de:	4c 93       	st	X, r20
 2e0:	6c 7f       	andi	r22, 0xFC	; 252
 2e2:	68 83       	st	Y, r22
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	bf 90       	pop	r11
 2f2:	af 90       	pop	r10
 2f4:	9f 90       	pop	r9
 2f6:	8f 90       	pop	r8
 2f8:	08 95       	ret

000002fa <DRAM_Read>:
 2fa:	0e 94 27 01 	call	0x24e	; 0x24e <DRAM_SetAddress>
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7e04a6>
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x7e0200>
 310:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7e0b16>
 314:	80 ff       	sbrs	r24, 0
 316:	fc cf       	rjmp	.-8      	; 0x310 <DRAM_Read+0x16>
 318:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7e0448>
 31c:	98 e0       	ldi	r25, 0x08	; 8
 31e:	90 93 a5 04 	sts	0x04A5, r25	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7e04a5>
 322:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
 326:	08 95       	ret

00000328 <DRAM_Init>:
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
 32e:	88 e3       	ldi	r24, 0x38	; 56
 330:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7e04a5>
 334:	8f e6       	ldi	r24, 0x6F	; 111
 336:	97 e1       	ldi	r25, 0x17	; 23
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <DRAM_Init+0x10>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <DRAM_Init+0x16>
 33e:	00 00       	nop
 340:	88 e0       	ldi	r24, 0x08	; 8
 342:	98 e0       	ldi	r25, 0x08	; 8
 344:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <__TEXT_REGION_LENGTH__+0x7e0487>
 348:	00 00       	nop
 34a:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <__TEXT_REGION_LENGTH__+0x7e0487>
 34e:	00 00       	nop
 350:	81 50       	subi	r24, 0x01	; 1
 352:	c1 f7       	brne	.-16     	; 0x344 <DRAM_Init+0x1c>
 354:	08 95       	ret

00000356 <main>:
static volatile uint8_t SRead[100];

int main(void)
{
	//Domyœlnie MCU startuje z wew. zegarem 4 MHz
	CPU_CCP = CCP_IOREG_gc;							//Odblokuj dostêp do rejestru chronionego
 356:	88 ed       	ldi	r24, 0xD8	; 216
 358:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSCHFCTRLA = CLKCTRL_FRQSEL_24M_gc;		//Zegar 24 MHz
 35a:	84 e2       	ldi	r24, 0x24	; 36
 35c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    
	UART_Init();				//Inicjalizacja USART
 360:	0e 94 6e 02 	call	0x4dc	; 0x4dc <UART_Init>
	sei();						//Odblokowjemy przerwania
 364:	78 94       	sei
	
	PORTB_DIRSET = PIN3_bm;		//Pin steruj¹cy LEDem
 366:	88 e0       	ldi	r24, 0x08	; 8
 368:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
	InitRDWRTimer();
 36c:	0e 94 9b 00 	call	0x136	; 0x136 <InitRDWRTimer>

	
	IO_DRAM_Init();				//Inicjalizacja pinów IO zwi¹zanych z DRAM
 370:	0e 94 c1 00 	call	0x182	; 0x182 <IO_DRAM_Init>
	DRAM_Timers_init();			//Inicjalizacja timerów generuj¹cych CAS i WE
 374:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DRAM_Timers_init>
	DRAM_Init();				//Inicjalizacja pamiêci DRAM
 378:	0e 94 94 01 	call	0x328	; 0x328 <DRAM_Init>
 37c:	c1 2c       	mov	r12, r1
 37e:	d1 2c       	mov	r13, r1
 380:	76 01       	movw	r14, r12
	for(uint8_t i = 0; i < sizeof(SRead); i++) SRead[i] = DRAM_Read(i);
 382:	c7 01       	movw	r24, r14
 384:	b6 01       	movw	r22, r12
 386:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DRAM_Read>
 38a:	f6 01       	movw	r30, r12
 38c:	e0 50       	subi	r30, 0x00	; 0
 38e:	f0 4c       	sbci	r31, 0xC0	; 192
 390:	80 83       	st	Z, r24
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	c8 1a       	sub	r12, r24
 396:	d8 0a       	sbc	r13, r24
 398:	e8 0a       	sbc	r14, r24
 39a:	f8 0a       	sbc	r15, r24
 39c:	84 e6       	ldi	r24, 0x64	; 100
 39e:	c8 16       	cp	r12, r24
 3a0:	d1 04       	cpc	r13, r1
 3a2:	e1 04       	cpc	r14, r1
 3a4:	f1 04       	cpc	r15, r1
 3a6:	69 f7       	brne	.-38     	; 0x382 <main+0x2c>
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <main+0x52>

000003aa <__vector_53>:
volatile uint16_t TxBufferCnt = 0;
volatile _Bool TxIntEn;
volatile _Bool CmdReceived = false;

ISR(USART3_RXC_vect)
{
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	0f 92       	push	r0
 3b2:	11 24       	eor	r1, r1
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	0f 92       	push	r0
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	8f 93       	push	r24
 3be:	9f 93       	push	r25
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	uint8_t recData = USART3_RXDATAL;
 3c4:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
	if((CmdReceived == false) && (RxBufferWriteIndex < sizeof(RxBuffer)))	//Odbieramy znaki tylko jeœli jest pusty bufor poleceñ i jest wolne miejsce
 3c8:	80 91 64 40 	lds	r24, 0x4064	; 0x804064 <CmdReceived>
 3cc:	81 11       	cpse	r24, r1
 3ce:	34 c0       	rjmp	.+104    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		RxBuffer[RxBufferWriteIndex] = recData;		//Zapisz odczytany znak do bufora
 3d0:	80 91 6b 40 	lds	r24, 0x406B	; 0x80406b <RxBufferWriteIndex>
 3d4:	e8 2f       	mov	r30, r24
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ed 58       	subi	r30, 0x8D	; 141
 3da:	ff 4b       	sbci	r31, 0xBF	; 191
 3dc:	90 83       	st	Z, r25
		RxBufferCnt++;
 3de:	20 91 69 40 	lds	r18, 0x4069	; 0x804069 <RxBufferCnt>
 3e2:	30 91 6a 40 	lds	r19, 0x406A	; 0x80406a <RxBufferCnt+0x1>
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ea:	20 93 69 40 	sts	0x4069, r18	; 0x804069 <RxBufferCnt>
 3ee:	30 93 6a 40 	sts	0x406A, r19	; 0x80406a <RxBufferCnt+0x1>
		if(RxBuffer[RxBufferWriteIndex] == '\n')
 3f2:	9a 30       	cpi	r25, 0x0A	; 10
 3f4:	71 f5       	brne	.+92     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		{
			if((RxBufferWriteIndex >= 1) && (RxBuffer[RxBufferWriteIndex - 1] == '\r'))
 3f6:	88 23       	and	r24, r24
 3f8:	81 f0       	breq	.+32     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	90 81       	ld	r25, Z
 3fe:	9d 30       	cpi	r25, 0x0D	; 13
 400:	61 f4       	brne	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			{
				--RxBufferWriteIndex;
 402:	81 50       	subi	r24, 0x01	; 1
 404:	80 93 6b 40 	sts	0x406B, r24	; 0x80406b <RxBufferWriteIndex>
				--RxBufferCnt;
 408:	80 91 69 40 	lds	r24, 0x4069	; 0x804069 <RxBufferCnt>
 40c:	90 91 6a 40 	lds	r25, 0x406A	; 0x80406a <RxBufferCnt+0x1>
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	80 93 69 40 	sts	0x4069, r24	; 0x804069 <RxBufferCnt>
 416:	90 93 6a 40 	sts	0x406A, r25	; 0x80406a <RxBufferCnt+0x1>
			}
			RxBuffer[RxBufferWriteIndex] = 0;	//Wpisz koñcowy znak NUL
 41a:	e0 91 6b 40 	lds	r30, 0x406B	; 0x80406b <RxBufferWriteIndex>
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	ed 58       	subi	r30, 0x8D	; 141
 422:	ff 4b       	sbci	r31, 0xBF	; 191
 424:	10 82       	st	Z, r1
			CmdReceived = true;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 64 40 	sts	0x4064, r24	; 0x804064 <CmdReceived>
			RxBufferCnt = 0; RxBufferWriteIndex = 0;
 42c:	10 92 69 40 	sts	0x4069, r1	; 0x804069 <RxBufferCnt>
 430:	10 92 6a 40 	sts	0x406A, r1	; 0x80406a <RxBufferCnt+0x1>
 434:	10 92 6b 40 	sts	0x406B, r1	; 0x80406b <RxBufferWriteIndex>
		} else RxBufferWriteIndex++;
	}
}
 438:	ff 91       	pop	r31
 43a:	ef 91       	pop	r30
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti
				--RxBufferCnt;
			}
			RxBuffer[RxBufferWriteIndex] = 0;	//Wpisz koñcowy znak NUL
			CmdReceived = true;
			RxBufferCnt = 0; RxBufferWriteIndex = 0;
		} else RxBufferWriteIndex++;
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 6b 40 	sts	0x406B, r24	; 0x80406b <RxBufferWriteIndex>
	}
}
 458:	ef cf       	rjmp	.-34     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

0000045a <__vector_54>:

ISR(USART3_DRE_vect)
{
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	0b b6       	in	r0, 0x3b	; 59
 466:	0f 92       	push	r0
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
	while((TxBufferCnt) && (USART3_STATUS & USART_DREIF_bm))	//Zapisujemy a¿ skoñczy siê miejsce w buforze
 470:	80 91 65 40 	lds	r24, 0x4065	; 0x804065 <TxBufferCnt>
 474:	90 91 66 40 	lds	r25, 0x4066	; 0x804066 <TxBufferCnt+0x1>
 478:	89 2b       	or	r24, r25
 47a:	21 f0       	breq	.+8      	; 0x484 <__vector_54+0x2a>
 47c:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 480:	85 fd       	sbrc	r24, 5
 482:	16 c0       	rjmp	.+44     	; 0x4b0 <__vector_54+0x56>
	{															//lub zabraknie danych do nadania
		USART3_TXDATAL = TxBuffer[TxBufferReadIndex++];
		TxBufferReadIndex%=sizeof(TxBuffer);
		TxBufferCnt--;
	}
	if(TxBufferCnt == 0) USART3_CTRLA &= ~USART_DREIF_bm;		//nie ma nic do nadania, wiêc blokujemy przerwanie
 484:	80 91 65 40 	lds	r24, 0x4065	; 0x804065 <TxBufferCnt>
 488:	90 91 66 40 	lds	r25, 0x4066	; 0x804066 <TxBufferCnt+0x1>
 48c:	89 2b       	or	r24, r25
 48e:	29 f4       	brne	.+10     	; 0x49a <__vector_54+0x40>
 490:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <__TEXT_REGION_LENGTH__+0x7e0865>
 494:	8f 7d       	andi	r24, 0xDF	; 223
 496:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <__TEXT_REGION_LENGTH__+0x7e0865>
}
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	0f 90       	pop	r0
 4a4:	0b be       	out	0x3b, r0	; 59
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

ISR(USART3_DRE_vect)
{
	while((TxBufferCnt) && (USART3_STATUS & USART_DREIF_bm))	//Zapisujemy a¿ skoñczy siê miejsce w buforze
	{															//lub zabraknie danych do nadania
		USART3_TXDATAL = TxBuffer[TxBufferReadIndex++];
 4b0:	e0 91 67 40 	lds	r30, 0x4067	; 0x804067 <TxBufferReadIndex>
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	8e 0f       	add	r24, r30
 4b8:	80 93 67 40 	sts	0x4067, r24	; 0x804067 <TxBufferReadIndex>
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	ed 58       	subi	r30, 0x8D	; 141
 4c0:	fe 4b       	sbci	r31, 0xBE	; 190
 4c2:	80 81       	ld	r24, Z
 4c4:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		TxBufferReadIndex%=sizeof(TxBuffer);
		TxBufferCnt--;
 4c8:	80 91 65 40 	lds	r24, 0x4065	; 0x804065 <TxBufferCnt>
 4cc:	90 91 66 40 	lds	r25, 0x4066	; 0x804066 <TxBufferCnt+0x1>
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	80 93 65 40 	sts	0x4065, r24	; 0x804065 <TxBufferCnt>
 4d6:	90 93 66 40 	sts	0x4066, r25	; 0x804066 <TxBufferCnt+0x1>
 4da:	ca cf       	rjmp	.-108    	; 0x470 <__vector_54+0x16>

000004dc <UART_Init>:
	if(TxBufferCnt == 0) USART3_CTRLA &= ~USART_DREIF_bm;		//nie ma nic do nadania, wiêc blokujemy przerwanie
}

void UART_Init()
{
	TxBufferWriteIndex = 0; TxBufferReadIndex = 0; TxBufferCnt = 0; TxIntEn = false;
 4dc:	10 92 68 40 	sts	0x4068, r1	; 0x804068 <TxBufferWriteIndex>
 4e0:	10 92 67 40 	sts	0x4067, r1	; 0x804067 <TxBufferReadIndex>
 4e4:	10 92 65 40 	sts	0x4065, r1	; 0x804065 <TxBufferCnt>
 4e8:	10 92 66 40 	sts	0x4066, r1	; 0x804066 <TxBufferCnt+0x1>
 4ec:	10 92 73 42 	sts	0x4273, r1	; 0x804273 <TxIntEn>
	RxBufferWriteIndex = 0; RxBufReadIndex = 0; RxBufferCnt = 0;
 4f0:	10 92 6b 40 	sts	0x406B, r1	; 0x80406b <RxBufferWriteIndex>
 4f4:	10 92 6c 40 	sts	0x406C, r1	; 0x80406c <RxBufReadIndex>
 4f8:	10 92 69 40 	sts	0x4069, r1	; 0x804069 <RxBufferCnt>
 4fc:	10 92 6a 40 	sts	0x406A, r1	; 0x80406a <RxBufferCnt+0x1>
	USART3_BAUD = 64*F_CPU/16/BAUDRATE;
 500:	80 e1       	ldi	r24, 0x10	; 16
 502:	97 e2       	ldi	r25, 0x27	; 39
 504:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 508:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	USART3_CTRLC = USART_CHSIZE_8BIT_gc;	//8 bitów/znak
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
	PORTB_DIRSET = PIN0_bm;					//PB0 - TxD, PB1 - RxD
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
	USART3_CTRLB = USART_RXEN_bm | USART_TXEN_bm;		//W³¹cz nadajnik i odbiornik UART
 518:	80 ec       	ldi	r24, 0xC0	; 192
 51a:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7e0866>
	USART3_CTRLA = USART_RXCIE_bm;		//Odblokuj przerwania odbiornika, nadajnika DRE odblokujemy jak bêdzie potrzebne
 51e:	80 e8       	ldi	r24, 0x80	; 128
 520:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <__TEXT_REGION_LENGTH__+0x7e0865>
}
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
